using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Runtime.CompilerServices;
using System.Diagnostics;

namespace lab1_sort
{
    class ReadFromFileRaw
    {
        public static int[] writeSingleArray;
        public static int[,] writeDuoArray;
        public static int[][] writeStepArray;

        public static bool readfromfile = false;
        public static void SingleLinedArray()
        {
            string[] LinesToRead;
            string _Number = "";
            List<int> NumbersList = new List<int>();
            string default_path = @"single.txt"; //Прямой путь к файлу, типизация файла: a; b; c;
            try
            {
                LinesToRead = File.ReadAllLines(default_path);
            }

            catch
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("Ошибка в пути к файлу!\nВ папке не было найдено файла single.txt!");
                Console.ResetColor();
                Console.WriteLine("Нажмите любую клавишу для возвращения в главное меню...");
                Console.ReadKey();
                Program.Menu();
            }

            LinesToRead = File.ReadAllLines(default_path);
            string FullLineOfArray = LinesToRead[0];

            if (!FullLineOfArray.Contains("; "))
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("Ошибка записи в файле, пожалуйста, проверьте введенные данные...\nПример рного ввода: 3; -1; 0; 80;", default_path);
                Console.ResetColor();
                Console.WriteLine("Нажмите любую клавишу для возвращения в главное меню...");
                Console.ReadKey();
                Program.Menu();
            }

            for (int i = 0; i < FullLineOfArray.LastIndexOf(';'); i++)
            {
                for (int j = 0; j < FullLineOfArray.IndexOf(';'); j++)
                {
                    _Number = _Number + FullLineOfArray.ElementAt(j);
                    FullLineOfArray.Replace(FullLineOfArray.ElementAt(j).ToString(), "");
                }

                NumbersList.Add(int.Parse(_Number));
                FullLineOfArray = FullLineOfArray.Remove(0, _Number.Length + 1);

                _Number = "";
            }
            try
            {
                Console.Clear();
                NumbersList.Add(Int32.Parse(FullLineOfArray.ToString().Replace(";", "")));
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("Got some trubles here, but we can handle...");
                System.Threading.Thread.Sleep(500);
                Console.Clear();
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine("Done Sucsessfully!");
                System.Threading.Thread.Sleep(1000);
                Console.ResetColor();
                Console.Clear();
            }
            catch
            {
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine("Done Sucsessfully!");
                System.Threading.Thread.Sleep(1000);
                Console.ResetColor();
                Console.Clear();
            }
            writeSingleArray = NumbersList.ToArray();
        } //Чтение одномерного массива из файла
        public static void DuoLinedArray()
        {
            string[] LinesToRead;
            string FullLineOfArray = "";
            string _Number = "";
            List<int> NumbersList = new List<int>();
            int c_lines = 0, maxElemsInLines=0;

            string default_path = @"duo.txt"; //Прямой путь к файлу, типизация файла: a; b; c;\na1; a2; a3;
            try
            {
                LinesToRead = File.ReadAllLines(default_path);
            }

            catch
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("Ошибка в пути к файлу!\nВ папке не было найдено файла duo.txt!");
                Console.ResetColor();
                Console.WriteLine("Нажмите любую клавишу для возвращения в главное меню...");
                Console.ReadKey();
                Program.Menu();
            } //Исключение на путь

            LinesToRead = File.ReadAllLines(default_path);
            for (int i = 0; i < LinesToRead.Length; i++)
            {
                FullLineOfArray = FullLineOfArray + LinesToRead[i];
            }
            

            c_lines = LinesToRead.Length;
            
            //Считать кол-во линий, потом каждую описать как единичный массив

            if (!FullLineOfArray.Contains("; "))
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("Ошибка записи в файле, пожалуйста, проверьте введенные данные...\nПример рного ввода: 3; -1; 0; 80;\n5; -11; 103; 11;" +
                    "\nЗаметьте, что если элементов для ровного массива не будет хватать, пустые места займут нули", default_path);
                Console.ResetColor();
                Console.WriteLine("Нажмите любую клавишу для возвращения в главное меню...");
                Console.ReadKey();
                Program.Menu();
            } //Исключение на типизацию



            //counter for ASS
            int linesToListCounter=0;
            for (int i = 0; i < LinesToRead.Length; i++) //На Каждую строку
            {
                for (int k = 0; k < LinesToRead[i].LastIndexOf(';')+1; k++) // Сколько там этих ваших
                {
                    for (int j = 0; j < LinesToRead[i].IndexOf(';'); j++)
                    {
                        _Number += LinesToRead[i].ElementAt(j);
                        LinesToRead[i].Replace(LinesToRead[i].ElementAt(j).ToString(), "");
                    }

                    NumbersList.Add(int.Parse(_Number));

                    LinesToRead[i] = LinesToRead[i].Remove(0, _Number.Length + 1);

                    _Number = "";
                }

                if (linesToListCounter < i)
                {
                    linesToListCounter++;
                    NumbersList.Clear();
                }

                if (maxElemsInLines < NumbersList.Count)
                {
                    maxElemsInLines = NumbersList.Count;
                }
            }

            //counter is ended


            FullLineOfArray = "";
            LinesToRead = File.ReadAllLines(default_path);
            for (int i = 0; i < LinesToRead.Length; i++)
            {
                FullLineOfArray = FullLineOfArray + LinesToRead[i];
            }
            writeDuoArray = new int[LinesToRead.Length, maxElemsInLines];


            //Writer
            linesToListCounter = 0;
            for (int i = 0; i < LinesToRead.Length; i++) //На Каждую строку
            {
                for (int k = 0; k < LinesToRead[i].LastIndexOf(';')+1; k++) // Сколько там этих ваших
                {
                    for (int j = 0; j < LinesToRead[i].IndexOf(';'); j++)
                    {
                        _Number += LinesToRead[i].ElementAt(j);
                        LinesToRead[i].Replace(LinesToRead[i].ElementAt(j).ToString(), "");
                    }

                    NumbersList.Add(int.Parse(_Number));

                    LinesToRead[i] = LinesToRead[i].Remove(0, _Number.Length + 1);

                    _Number = "";
                }

                if (linesToListCounter <= i)
                {
                    
                    for (int l = 0; l < maxElemsInLines; l++)
                    {
                        try 
                        {
                            
                            writeDuoArray[linesToListCounter, l] = NumbersList.ElementAt(l);
                        }
                        catch
                        {
                            while (NumbersList.Count < maxElemsInLines)
                            {
                                NumbersList.Add(0);
                            }
                            writeDuoArray[linesToListCounter, l] = int.Parse(LinesToRead[l].ToString().Replace(";",""));
                        }
                    }
                    linesToListCounter++;
                    NumbersList.Clear();
                }
            }
            
            //counter is ended

            try
            {
                Console.Clear();
                NumbersList.Add(int.Parse(FullLineOfArray.ToString().Replace(";", "")));
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("Got some trubles here, but we can handle...");
                System.Threading.Thread.Sleep(500);
                Console.Clear();
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine("Done Sucsessfully!");
                System.Threading.Thread.Sleep(1000);
                Console.ResetColor();
                Console.Clear();
            }
            catch
            {
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine("Done Sucsessfully!");
                System.Threading.Thread.Sleep(1000);
                Console.ResetColor();
                Console.Clear();
            }
        }    //Чтение двумерного массива из файла
        public static void StepLinedArray()
        {
            string[] LinesToRead;
            string FullLineOfArray = "";
            string _Number = "";
            List<int> NumbersList = new List<int>();
            int c_lines = 0, maxElemsInLines = 0;

            string default_path = @"multy.txt"; //Прямой путь к файлу, типизация файла: a; b; c;\na1; a2; a3;
            try
            {
                LinesToRead = File.ReadAllLines(default_path);
            }

            catch
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("Ошибка в пути к файлу!\nВ папке не было найдено файла duo.txt!");
                Console.ResetColor();
                Console.WriteLine("Нажмите любую клавишу для возвращения в главное меню...");
                Console.ReadKey();
                Program.Menu();
            } //Исключение на путь

            LinesToRead = File.ReadAllLines(default_path);
            for (int i = 0; i < LinesToRead.Length; i++)
            {
                FullLineOfArray = FullLineOfArray + LinesToRead[i];
            }


            c_lines = LinesToRead.Length;

            //Считать кол-во линий, потом каждую описать как единичный массив

            if (!FullLineOfArray.Contains("; "))
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("Ошибка записи в файле, пожалуйста, проверьте введенные данные...\nПример рного ввода: 3; -1; 0; 80;\n5; -11; 103; 11;" +
                    "\nЗаметьте, что если элементов для ровного массива не будет хватать, пустые места займут нули", default_path);
                Console.ResetColor();
                Console.WriteLine("Нажмите любую клавишу для возвращения в главное меню...");
                Console.ReadKey();
                Program.Menu();
            } //Исключение на типизацию



            //counter for ASS
            int linesToListCounter = 0;
            for (int i = 0; i < LinesToRead.Length; i++) //На Каждую строку
            {
                for (int k = 0; k < LinesToRead[i].LastIndexOf(';') + 1; k++) // Сколько там этих ваших
                {
                    for (int j = 0; j < LinesToRead[i].IndexOf(';'); j++)
                    {
                        _Number += LinesToRead[i].ElementAt(j);
                        LinesToRead[i].Replace(LinesToRead[i].ElementAt(j).ToString(), "");
                    }

                    NumbersList.Add(int.Parse(_Number));

                    LinesToRead[i] = LinesToRead[i].Remove(0, _Number.Length + 1);

                    _Number = "";
                }

                if (linesToListCounter < i)
                {
                    linesToListCounter++;
                    NumbersList.Clear();
                }

                if (maxElemsInLines < NumbersList.Count)
                {
                    maxElemsInLines = NumbersList.Count;
                }
            }

            //counter is ended


            FullLineOfArray = "";
            LinesToRead = File.ReadAllLines(default_path);
            for (int i = 0; i < LinesToRead.Length; i++)
            {
                FullLineOfArray = FullLineOfArray + LinesToRead[i];
            }
            writeStepArray = new int[LinesToRead.Length][];


            //Writer
            linesToListCounter = 0;
            for (int i = 0; i < LinesToRead.Length; i++) //На Каждую строку
            {
                for (int k = 0; k < LinesToRead[i].LastIndexOf(';') + 1; k++) // Сколько там этих ваших
                {
                    for (int j = 0; j < LinesToRead[i].IndexOf(';'); j++)
                    {
                        
                        _Number += LinesToRead[i].ElementAt(j);
                        LinesToRead[i].Replace(LinesToRead[i].ElementAt(j).ToString(), "");
                    }

                    NumbersList.Add(int.Parse(_Number));

                    LinesToRead[i] = LinesToRead[i].Remove(0, _Number.Length + 1);


                    _Number = "";

                }

                if (linesToListCounter <= i)
                {

                    for (int l = 0; l < maxElemsInLines; l++)
                    {
                        try
                        {
                            //int f = maxElemsInLines;
                            while (NumbersList.Count < maxElemsInLines)
                            {
                                NumbersList.Add(0);
                            }
                            writeStepArray[linesToListCounter] = NumbersList.ToArray();
                        }
                        catch
                        {
                            writeStepArray[linesToListCounter][l] = int.Parse(LinesToRead[l].ToString().Replace(";",""));
                        }
                    }
                    linesToListCounter++;
                    NumbersList.Clear();
                }
            }
            
            //counter is ended

            try
            {
                Console.Clear();
                NumbersList.Add(int.Parse(FullLineOfArray.ToString().Replace(";", "")));
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("Got some trubles here, but we can handle...");
                System.Threading.Thread.Sleep(500);
                Console.Clear();
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine("Done Sucsessfully!");
                System.Threading.Thread.Sleep(1000);
                Console.ResetColor();
                Console.Clear();
            }
            catch
            {
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine("Done Sucsessfully!");
                System.Threading.Thread.Sleep(1000);
                Console.ResetColor();
                Console.Clear();
            }
        }    //Чтение зубчатого массива из файла
    }
    class Program
    {
        #region ничего
        static void RightInputCheck(string IsNumber, bool result, int InCase)
        {

            switch (InCase)
            {
                case 1:
                    if (result == false)
                    {
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("Были введены неверные данные, пожалуйста, повторите попытку ввода заново.");
                        Console.ResetColor();
                        Console.Write("\n\nНажмите любую клавишу, чтобы продолжить...");
                        Console.ReadKey();
                        Menu();
                    }
                    break;

                case 2:
                    result = int.TryParse(IsNumber, out int itself);
                    if (itself <= 0)
                    {
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("Размер массива не может быть меньше или равен 0, и иметь буквенное значение");
                        Console.ResetColor();
                        Console.Write("\n\nНажмите любую клавишу, чтобы продолжить...");
                        Console.ReadKey();
                        Menu();
                    }
                    break;
            };

        } //Обработчик ошибок | InCase: 1- проверка на циферки, 2-Кол-во элементов в массиве
        static void AskForFileInput()
        {
            Console.Clear();
            Console.Write("Вы хотите ввести данные из файла?[Y/n] ");
            string Answer = Console.ReadLine();

            if (Answer.ToUpper().Contains("Y"))
                ReadFromFileRaw.readfromfile = true;
            else
                ReadFromFileRaw.readfromfile = false;

            Console.Clear();
        } //запрос на чтение из файла
        public static void Menu()
        {
            Console.Title = "Сортировка массивов | Удалых Максим БПИ20-9";
            Int32 Coice = 0, key = 0;
            do
            {
                Console.Clear();
                Console.WriteLine("Выбор сортировки");
                Console.WriteLine(((Coice == 0) ? ">> " : " ") + "Сортировка одномерного массива");
                Console.WriteLine(((Coice == 1) ? ">> " : " ") + "Сортировка одномерного массива с использованием свойств и методов");
                Console.WriteLine(((Coice == 2) ? ">> " : " ") + "Сортировка двумерного массива");
                Console.WriteLine(((Coice == 3) ? ">> " : " ") + "Сортировка ступенчатого массива");

                key = (int)Console.ReadKey().Key;
                if (key == 38) Coice--;
                if (key == 40) Coice++;
                if (key == 13 || key == 27) break;
                

                if (Coice < 0) Coice = 3;
                if (Coice > 3) Coice = 0;

            } while (key != 27);

            if (key == 27)
            {
                Process.GetCurrentProcess().Kill();
            }
            if (Coice == 0)
            {
                sortByCode();
            }
            Console.WriteLine(Coice);
            if (Coice == 1)
            {
                sortByCodeArray();
            }
            Console.WriteLine(Coice);
            if (Coice == 2)
            {
                sortByCodeDouble();
            }
            Console.WriteLine(Coice);
            if (Coice == 3)
            {
                sortByCodeStep();
            }
        } //Меню
        static void sortByCode()
        {
            bool error;
            int[] a_sortByCode;
            int inMin = 0;
            int inMax = 0;
            int Min;
            int Max;
            int n = 0;
            Console.Clear();

            AskForFileInput();
            if (ReadFromFileRaw.readfromfile == true)
            {
                ReadFromFileRaw.SingleLinedArray();
                a_sortByCode = ReadFromFileRaw.writeSingleArray;
                n = a_sortByCode.Length;
            }
            else
            {

                Console.WriteLine("Введите нужное количество элементов в массиве");

                error = int.TryParse(Console.ReadLine(), out n);
                RightInputCheck(n.ToString(), error, 2);

                a_sortByCode = new int[n];

                for (int i = 0; i < n; i++)
                {
                    Console.Clear();
                    Console.WriteLine("Введите {0} элемент", i+1);

                    error = int.TryParse(Console.ReadLine(), out a_sortByCode[i]);
                    RightInputCheck(a_sortByCode[i].ToString(), error, 2);
                }
            }

            Min = a_sortByCode[0];
            Max = a_sortByCode[0];

            for (int i = 0; i < a_sortByCode.Length; i++)
            {
                if (Max < a_sortByCode[i])
                {
                    Max = a_sortByCode[i];
                    inMax = i;
                }

                if (inMin > a_sortByCode[i])
                {
                    Min = a_sortByCode[i];
                    inMin = i;
                }
            }

            Console.Clear();
            Console.WriteLine("Вывожу массив: ");
            foreach (var item in a_sortByCode)
            {
                Console.Write("{0}\t", item);
            }

            Console.WriteLine("\n\nСамое большое число\nНомер:{2} \tИндекс:{0}\tЗначение:{1}", inMax, Max, inMax+1);
            Console.WriteLine("\nСамое маленькое число\nНомер:{2} \tИндекс:{0}\tЗначение:{1}", inMin, Min, inMin+1);

            for (int i = 0; i < n; i++)
            {
                for (int j = i; j < n; j++)
                {
                    if (a_sortByCode[i] > a_sortByCode[j])
                    {
                        int temp = a_sortByCode[i];
                        a_sortByCode[i] = a_sortByCode[j];
                        a_sortByCode[j] = temp;
                    }
                }
            }

            Console.WriteLine("\n\nПо возрастанию:");
            foreach (var item in a_sortByCode)
            {
                Console.Write("{0}\t", item);
            }

            for (int i = 0; i < n; i++)
            {
                for (int j = i; j < n; j++)
                {
                    if (a_sortByCode[i] < a_sortByCode[j])
                    {
                        int temp = a_sortByCode[i];
                        a_sortByCode[i] = a_sortByCode[j];
                        a_sortByCode[j] = temp;
                    }
                }
            }
            Console.WriteLine("\n\nПо убыванию:");
            foreach (var item in a_sortByCode)
            {
                Console.Write("{0}\t", item);
            }

            Console.WriteLine("\n\nЧетные:");
            int n2 = 0;
            for (int i = 0; i < n; i++)
            {
                if (a_sortByCode[i] % 2 == 0)
                {
                    n2++;
                }
            }
            if (n2 == 0)
            {
                Console.WriteLine("В массиве не было четных чисел.");
            }
            else
            {
                for (int i = 0; i < n; i++)
                {
                    for (int j = i; j < n; j++)
                    {
                        if (a_sortByCode[i] > a_sortByCode[j])
                        {
                            int temp = a_sortByCode[i];
                            a_sortByCode[i] = a_sortByCode[j];
                            a_sortByCode[j] = temp;
                        }
                    }
                }
                Array.Sort(a_sortByCode);
                int[] a_sortByCode_even = new int[n2];
                int f = 0;
                for (int k = 0; k < n; k++)
                {
                    if (a_sortByCode[k] % 2 == 0)
                    {
                        a_sortByCode_even[f] = a_sortByCode[k];
                        f++;
                    }
                    else { }
                }
                for (int i = 0; i < n2; i++)
                {
                    Console.Write("{0}\t", a_sortByCode_even[i]);
                }

            }
            Console.WriteLine("\n\nНажмите любую клавишу для возвращения в главное меню");
            Console.ReadKey();
            Menu();
        } //Сортировка одномерного массива вручную
        static void sortByCodeArray()
        {
            bool error;
            int n;
            int[] a_sortByCodeArray;

            Console.Clear();
            AskForFileInput();
            

            if (ReadFromFileRaw.readfromfile == true)
            {
                ReadFromFileRaw.SingleLinedArray();
                a_sortByCodeArray = ReadFromFileRaw.writeSingleArray;
                n = a_sortByCodeArray.Length;
            }
            else
            {
                Console.WriteLine("Введите нужное количество элементов в массиве");

                error = int.TryParse(Console.ReadLine(), out n);
                RightInputCheck(n.ToString(), error, 2);

                a_sortByCodeArray = new int[n];

                for (int i = 0; i < n; i++)
                {
                    Console.Clear();
                    Console.WriteLine("Введите {0} элемент", i+1);
                    error = int.TryParse(Console.ReadLine(), out a_sortByCodeArray[i]);
                    RightInputCheck(a_sortByCodeArray[i].ToString(), error, 1);
                }
            }
            Console.WriteLine("Вывожу массив");
            foreach (var item in a_sortByCodeArray)
            {
                Console.Write("{0}\t", item);
            }

            Console.WriteLine("\n\nМаксимальное значение: \nНомер:{2} \tИндекс:{0}\tЗначение:{1}", Array.IndexOf(a_sortByCodeArray, a_sortByCodeArray.Max()), a_sortByCodeArray.Max(), Array.IndexOf(a_sortByCodeArray, a_sortByCodeArray.Max())+1);
            Console.WriteLine("\n\nМинимальное значение: \nНомер:{2} \tИндекс:{0}\tЗначение:{1}", Array.IndexOf(a_sortByCodeArray, a_sortByCodeArray.Min()), a_sortByCodeArray.Min(), Array.IndexOf(a_sortByCodeArray, a_sortByCodeArray.Min())+1);

            Array.Sort(a_sortByCodeArray);
            Console.WriteLine("\n\nСортировка по возрастанию");
            foreach (var item in a_sortByCodeArray)
            {
                Console.Write("{0}\t", item);
            }

            Array.Reverse(a_sortByCodeArray);
            Console.WriteLine("\n\nСортировка по убыванию");
            foreach (var item in a_sortByCodeArray)
            {
                Console.Write("{0}\t", item);
            }

            Console.WriteLine("\nВывод четных чисел массива");
            Array.Sort(a_sortByCodeArray);
            int counter = 0;
            for (int i = 0; i < a_sortByCodeArray.Length; i++)
            {
                if (a_sortByCodeArray[i] % 2 == 0)
                {
                    counter++;
                }
            }
            if (counter == 0)
            {
                Console.WriteLine("В массиве нет четных чисел.");
            }
            else
            {
                int[] a_sortByCodeArray_even = new int[counter];
                counter = 0;
                for (int i = 0; i < a_sortByCodeArray.Length; i++)
                {
                    if (a_sortByCodeArray[i] % 2 == 0)
                    {
                        a_sortByCodeArray_even[counter] = a_sortByCodeArray[i];
                        counter++;
                    }
                }

                foreach (var item in a_sortByCodeArray_even)
                {
                    Console.Write("{0}\t", item);
                }
                
            }
            Console.WriteLine("\n\nНажмите любую клавишу для возвращения в главное меню");
            Console.ReadKey();
            Menu();
        } //Сортировка одномерного массива с использованием методов сортировки Sys.Array
        static void sortByCodeDouble()
        {
            int n = 0, m = 0;
            bool error;
            int[,] a_sortByCodeDouble;
            int max = 0, min = 0;
            int pillar_maxInd = 0, pillar_minInd = 0, l_maxInd = 0, l_minInd = 0;

            Console.Clear();
            AskForFileInput();

            if (ReadFromFileRaw.readfromfile == true)
            {
                ReadFromFileRaw.DuoLinedArray();
                a_sortByCodeDouble = ReadFromFileRaw.writeDuoArray;
                n = ReadFromFileRaw.writeDuoArray.GetLength(0);
                m = ReadFromFileRaw.writeDuoArray.GetLength(1);
                for (int i = 0; i < n; i++)
                {
                    for (int j = 0; j < m; j++)
                    {
                        max = a_sortByCodeDouble[i, j];
                        min = a_sortByCodeDouble[i, j];
                        pillar_maxInd = j; pillar_minInd = j;
                        l_maxInd = i; l_minInd = i;
                    }
                }
            }
            else 
            { 
                Console.Clear();
                Console.WriteLine("Параметры для первого массива");

                Console.WriteLine("Введите нужное количество строк в массиве");
                error = int.TryParse(Console.ReadLine(), out n);
                RightInputCheck(n.ToString(), error, 2);

                Console.WriteLine("Введите нужное количество столбцов в массиве");
                error = int.TryParse(Console.ReadLine(), out m);
                RightInputCheck(m.ToString(), error, 2);

                a_sortByCodeDouble = new int[n, m];

                for (int i = 0; i < n; i++)
                {
                    for (int j = 0; j < m; j++)
                    {
                        Console.Clear();
                        Console.WriteLine("Массив 1\nВведите элемент для {0} строки, {1} столбца", i+1, j+1);

                        error = int.TryParse(Console.ReadLine(), out a_sortByCodeDouble[i, j]);
                        RightInputCheck(m.ToString(), error, 1);

                        max = a_sortByCodeDouble[i, j];
                        min = a_sortByCodeDouble[i, j];
                        pillar_maxInd = j; pillar_minInd = j;
                        l_maxInd = i; l_minInd = i;
                    }
                }
                Console.Clear();
            }

            Console.WriteLine("Параметры для второго массива");

            Console.WriteLine("Введите нужное количество строк в массиве");
            error = int.TryParse(Console.ReadLine(), out int n2);
            RightInputCheck(n2.ToString(), error, 2);

            Console.WriteLine("Введите нужное количество столбцов в массиве");
            error = int.TryParse(Console.ReadLine(), out int m2);
            RightInputCheck(m2.ToString(), error, 2);


            int[,] a_sortByCodeDouble2 = new int[n2, m2];

            Console.Clear();
            for (int i = 0; i < n2; i++)
            {
                for (int j = 0; j < m2; j++)
                {
                    Console.Clear();
                    Console.WriteLine("Массив 2\nВведите элемент для {0} строки, {1} столбца", i+1, j+1);
                    error = int.TryParse(Console.ReadLine(), out a_sortByCodeDouble2[i, j]);
                    RightInputCheck(m.ToString(), error, 1);
                }
            }
            Console.Clear();

            Console.WriteLine("Вывожу массив 1:");
            for (int i = 0; i < n; i++)
            {
                Console.WriteLine();
                for (int j = 0; j < m; j++)
                {
                    Console.Write("{0}\t", a_sortByCodeDouble[i, j]);
                }
            }

            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < m; j++)
                {
                    if (max < a_sortByCodeDouble[i, j])
                    {
                        max = a_sortByCodeDouble[i, j];
                        l_maxInd = i;
                        pillar_maxInd = j;
                    }
                    if (min > a_sortByCodeDouble[i, j])
                    {
                        min = a_sortByCodeDouble[i, j];
                        l_minInd = i;
                        pillar_minInd = j;
                    }
                }
            }

            Console.WriteLine("\n\nМаксимальное значение: \nНомер: {3};{4} \tИндекс: {0};{1}\tЗначение: {2}", l_maxInd, pillar_maxInd, max, l_maxInd+1, pillar_maxInd+1);
            Console.WriteLine("\nМинимальное значение:  \nНомер: {3};{4} \tИндекс: {0};{1}\tЗначение: {2}", l_minInd, pillar_minInd, min, l_minInd+1, pillar_minInd+1);
            int summ_a1 = 0;
            int summ_a2 = 0;

            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < m; j++)
                {
                    summ_a1 += a_sortByCodeDouble[i, j];
                }
            }

            for (int i = 0; i < n2; i++)
            {
                for (int j = 0; j < m2; j++)
                {
                    summ_a2 += a_sortByCodeDouble2[i, j];
                }
            }

            Console.WriteLine("\nПроизведение двух массивов: {0}\nРазность двух массивов: {1}\nСумма двух массивов: {2}",
                summ_a1 * summ_a2, summ_a1 - summ_a2, summ_a1 + summ_a2);

            Console.WriteLine("\n\nНажмите любую клавишу для возвращения в главное меню");
            Console.ReadKey();
            Menu();
        } //Сортировка двумерного массива
        static void sortByCodeStep()
        {
            bool error;
            int _index = 0;
            int[][] a_sortbysteps;
            int min = 0;
            int max = 0;
            int l = 0, n = 0;

            Console.Clear();
            AskForFileInput();

            if (ReadFromFileRaw.readfromfile == true)
            {
                ReadFromFileRaw.StepLinedArray();
                a_sortbysteps = ReadFromFileRaw.writeStepArray;
                max = a_sortbysteps[0][0];
                min = a_sortbysteps[0][0];
                n = a_sortbysteps.GetLength(0);
                l = ReadFromFileRaw.writeStepArray[0].Length;
            }
            else
            {
                Console.Clear();
                Console.WriteLine("Выберите количество массивов для массива");

                error = int.TryParse(Console.ReadLine(), out n);
                RightInputCheck(n.ToString(), error, 2);

                a_sortbysteps = new int[n][];

                for (int i = 0; i < n; i++)
                {
                    Console.Clear();
                    Console.WriteLine("Выберите кол-во элементов для массива {0}", i);

                    error = int.TryParse(Console.ReadLine(), out l);
                    RightInputCheck(l.ToString(), error, 2);

                    a_sortbysteps[i] = new int[l];
                }

                for (int i = 0; i < l; i++)
                {
                    for (int j = 0; j < a_sortbysteps[i].Length; j++)
                    {
                        Console.Write("\nМассив {0}, элемент {1}: ", i+1, j+1);

                        error = int.TryParse(Console.ReadLine(), out a_sortbysteps[i][j]);
                        RightInputCheck(a_sortbysteps[i][j].ToString(), error, 1);

                        max = a_sortbysteps[i][j];
                        min = a_sortbysteps[i][j];
                    }
                }
            }
            Console.Clear();

            Console.Write("Перед тем, как продолжить, вы хотите изменить данные элементов в массиве?[Y/n]");

            string answer = Console.ReadLine();
            Console.Clear();

            if (answer.ToUpper().Contains("Y"))
            {
                bool ischanging = true;
                int number=0;
                while (ischanging == true)
                {
                    Console.Clear();
                    bool accepted = false;
                    while(accepted == false) { 
                        Console.Write("Всего массивов: {0}\nВведите номер массива: ", a_sortbysteps.Length);
                        error = int.TryParse(Console.ReadLine(), out number);
                        RightInputCheck(number.ToString(), error, 1);

                        if (number > a_sortbysteps.Length || number < 1)
                        {
                            accepted = false;
                            Console.Clear();
                            Console.WriteLine("Вы не можете ввести число большее кол-ва массивов и меньшее 1");
                        }
                        
                        else
                            accepted = true;
                        
                        number--;
                    }
                    accepted = false;
                    while (accepted == false)
                    {
                        foreach (var item in a_sortbysteps[number])
                        {
                            Console.Write("{0}\t", item);
                        }
                    
                        Console.Write("\nВведите номер элемента: ");
                        error = int.TryParse(Console.ReadLine(), out _index);
                        RightInputCheck(_index.ToString(), error, 1);
                    
                        if (_index > a_sortbysteps[number].Length || _index < 1)
                        {
                            accepted = false;
                            Console.Clear();
                            Console.WriteLine("ВЫ не можете выбрать несуществующий элемент");
                        }
                        else
                        {
                            accepted = true;
                        }
                    }
                    _index--;

                    Console.Write("\nЗаменить число {0} на ", a_sortbysteps[number][_index]);

                    error = int.TryParse(Console.ReadLine(), out a_sortbysteps[number][_index]);
                    RightInputCheck(a_sortbysteps[number][_index].ToString(), error, 1);

                    Console.Clear();
                    Console.WriteLine("Введите Enter, чтобы продолжить и ESQ чтобы выйти из редактора массивов.");

                    int key = (int)Console.ReadKey().Key;
                    if (key == 27)
                        ischanging = false;
                }
            }

            Console.WriteLine("Вывожу массив...");
            for (int i = 0; i < a_sortbysteps.Length; i++)
            {
                Console.Write("\nМассив {0}\n", i);
                for (int j = 0; j < l; j++)
                {
                    Console.Write("{0}\t", a_sortbysteps[i][j]);
                    if (min > a_sortbysteps[i][j])
                        min = a_sortbysteps[i][j];
                    if (max < a_sortbysteps[i][j])
                        max = a_sortbysteps[i][j];
                }
            }

            Console.WriteLine("\n\nМаксимальное значение: {0}\nМинимальное значение: {1}", max, min);
            Console.WriteLine("\n\nНажмите любую клавишу для возвращения в главное меню");
            Console.ReadKey();
            Menu();
        } //Сортировка ступенчатого массива
        #endregion
        static void Main(string[] args)
        {
            Menu();
        }
    }
}
